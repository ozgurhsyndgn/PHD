
##biomod2
# setup environment ----

setwd("E:/Doktora/0_Thesis/2_Thesis_Data/Raster/0_STACK/Buryal_current/Rscripts/0_Topographic")

## install the latest release of biomod2 if needed

library(devtools)
devtools::install_github('biomodhub/biomod2')

## load the required packages


library(qpcR)
library(spThin)
library(ggpubr)
library(tidyverse)
library(dplyr)
library(latticeExtra)
library(lattice)
library(corrplot)
library(RColorBrewer)
library(zoom)
library(ggpubr)
library(ggtext)
library(biomod2)
library(ggplot2)
library(viridis)
library(gridExtra)
library(rasterVis)
library(sf)
library(usdm)
library(tidyterra)
library(biomod2)
library(blockCV)
library(remotes)
library(terra)
library(ggcorrplot)
library(dplyr)

# Preprocessing - Preparing Data--------------------------------------------------


castanea_occ <- read.csv('E:/Doktora/0_Thesis/2_Thesis_Data/Raster/0_STACK/Buryal_current/2_Points/points_utm/buryako_castanea_points.csv')
castanea_shp <- st_read("E:/Doktora/0_Thesis/2_Thesis_Data/Raster/0_STACK/Buryal_current/2_Points/points_utm/buryako_castaneaa_thinned_utm.shp")
castanea_occ
castanea_shp

#summary(castanea_occ)

# use an existing shapefile to restrict stack

extshp <- st_read("E:/Doktora/0_Thesis/2_Thesis_Data/Raster/0_STACK/Buryal_current/3_Buryal_Borders/buryako_borders_utm.shp")
#extshp_buffer <- st_read("")


### Climatic Variables ###


topohydrolyrs <- rast(list.files(path = "E:/Doktora/0_Thesis/2_Thesis_Data/Raster/0_STACK/Buryal_current/SAGA3", 
                                 recursive=T, full.names=T, all.files=T))

names(topohydrolyrs)

topohydrolyrscr <- crop(topohydrolyrs,extshp,mask=TRUE)

names(topohydrolyrscr)


## SUBSET ### 'I've subsetted my variables from the file 

topohydrolyrscr_subset <- subset(topohydrolyrscr, c(1,2,3,4))

# 3,4,13,15,18,26,31 (7lyrs)

names(topohydrolyrscr_subset)
plot(topohydrolyrscr_subset)

### VIF / Plots -------------------------------------------------------------


vif_castanea<- vifstep(topohydrolyrscr)
vif_castanea


vif <- vif_castanea@results
vif
corMatrix<-vif_castanea@corMatrix
corMatrix

topohydrolyrscr_excluded <- exclude(topohydrolyrscr,vif_castanea)

names(topohydrolyrscr_excluded)
names(topohydrolyrscr_subset)

#### some ggplot modifications on corrplots ##

levelplot(corMatrix,
          main = "",
          xlab="",
          ylab="",
          col.regions = colorRampPalette(brewer.pal(4, "Blues"))(25),
          row.values = seq_len(nrow(corMatrix)),
          column.values = seq_len(ncol(corMatrix)),
          scales = list(x = list(rot = 26)),
          par.settings = list(axis.text = list(fontfamily = "Times New Roman", fontface="bold")),
          panel = function(...){
            panel.levelplot(...)
            coords <- expand.grid(x = 1:ncol(corMatrix), y = 1:nrow(corMatrix))
            panel.text(x = coords$x, y = coords$y,
                       labels = round(corMatrix, 2),
                       fontfamily = "Times New Roman", fontface="bold",
                       col = "black")
          })


colnames(corMatrix) <- c("Guneşlenme", "Minimal_Kivriklik", "Egim","VDCN")
rownames(corMatrix) <- c("Guneşlenme", "Minimal_Kivriklik", "Egim","VDCN")

ggcorrplot(corMatrix, hc.order = T, type = "lower",
           outline.col = "white",
           ggtheme = ggplot2::theme_linedraw,
           colors = c("white",'#728FCE','#151B54'),
           lab = TRUE, lab_size = 6,lab_col='white', show.diag=F,
           legend.title = "", tl.cex=14)+
          theme(
            legend.key.width=unit(0.5, "cm"),
            legend.key.height=unit(1.5, "cm"),
            legend.title=element_text(size=40),
            legend.text=element_text(size=15)
          )


# BIOMOD_FormatingData -------create your species data with pre-defined PA points --------------------

set.seed(123)
castanea_data <- 
  BIOMOD_FormatingData(
    resp.var = castanea_occ['species'],
    resp.xy = castanea_occ[, c('x', 'y')],
    expl.var = topohydrolyrscr,
    resp.name = "castanea",
    PA.nb.rep = 10, PA.nb.absences = c(210,210,210,210,420,420,420,420,630,630),
    PA.strategy = "disk",
    PA.dist.min = 3000,
    na.rm = TRUE,
    filter.raster = FALSE
  )

castanea_data

write.csv(castanea_points_extractedPA9, "buryako_pa9_points.csv")
sf::st_write(scv8$blocks, "buryako_blocks_shapefile.shp")
sf::st_write(castanea_points_extractedPA9$geometry, "buryako_pa9_points.shp")


## SPATIAL AUTOCORELATION ## check the minimum block-size to avoid spatial autocorelation ###


castanea_range <- cv_spatial_autocor(
  x = castanea_shp, # species data
  column = "species", # column storing presence-absence records (0s and 1s)
  plot = TRUE
)

castanea_range$range


# blockCV ---------- creating your blocks accordingly to your species data, here you define your block size and shape as well ----------


castanea_dataPA1 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA1<-castanea_dataPA1|>filter(castanea_dataPA1$PA1==TRUE)|>dplyr::select(ID, PA1,x,y)

castanea_points_extractedPA1 <- sf::st_as_sf(castanea_dataPA1, coords = c("x", "y"), crs = 32635) ## for BLOCK-CV

castanea_points_extractedPA1

scv1 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA1,
  column = "PA1", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA2 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA2<-castanea_dataPA2|>filter(castanea_dataPA2$PA2==TRUE)|>dplyr::select(ID, PA2,x,y)

castanea_points_extractedPA2 <- sf::st_as_sf(castanea_dataPA2, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA2

scv2 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA2,
  column = "PA2", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA3 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA3<-castanea_dataPA3|>filter(castanea_dataPA3$PA3==TRUE)|>dplyr::select(ID,PA3,x,y)

castanea_points_extractedPA3 <- sf::st_as_sf(castanea_dataPA3, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA3

scv3 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA3,
  column = "PA3", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA4 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA4<-castanea_dataPA4|>filter(castanea_dataPA4$PA4==TRUE)|>dplyr::select(ID,PA4,x,y)

castanea_points_extractedPA4 <- sf::st_as_sf(castanea_dataPA4, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA4

scv4 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA4,
  column = "PA4", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA5 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA5<-castanea_dataPA5|>filter(castanea_dataPA5$PA5==TRUE)|>dplyr::select(ID,PA5,x,y)

castanea_points_extractedPA5 <- sf::st_as_sf(castanea_dataPA5, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA5

scv5 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA5,
  column = "PA5", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA6 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA6<-castanea_dataPA6|>filter(castanea_dataPA6$PA6==TRUE)|>dplyr::select(ID,PA6,x,y)

castanea_points_extractedPA6 <- sf::st_as_sf(castanea_dataPA6, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA6

scv6 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA6,
  column = "PA6", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA7 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA7<-castanea_dataPA7|>filter(castanea_dataPA7$PA7==TRUE)|>dplyr::select(ID,PA7,x,y)

castanea_points_extractedPA7 <- sf::st_as_sf(castanea_dataPA7, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA7

scv7 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA7,
  column = "PA7", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA8 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA8<-castanea_dataPA8|>filter(castanea_dataPA8$PA8==TRUE)|>dplyr::select(ID,PA8,x,y)

castanea_points_extractedPA8 <- sf::st_as_sf(castanea_dataPA8, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA8

scv8 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA8,
  column = "PA8", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA9 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA9<-castanea_dataPA9|>filter(castanea_dataPA9$PA9==TRUE)|>dplyr::select(ID,PA9,x,y)

castanea_points_extractedPA9 <- sf::st_as_sf(castanea_dataPA9, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA9

scv9 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA9,
  column = "PA9", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##

castanea_dataPA10 <- castanea_data@PA.table |> tibble::rownames_to_column( "ID") |> cbind(castanea_data@coord)

castanea_dataPA10<-castanea_dataPA10|>filter(castanea_dataPA10$PA10==TRUE)|>dplyr::select(ID,PA10,x,y)

castanea_points_extractedPA10 <- sf::st_as_sf(castanea_dataPA10, coords = c("x", "y"), crs = 32635)

castanea_points_extractedPA10

scv10 <- blockCV::cv_spatial(
  x = castanea_points_extractedPA10,
  column = "PA10", # the response column (binary or multi-class)
  r = topohydrolyrscr_subset,
  k = 4, # number of folds
  hexagon = FALSE,
  rows_cols = c(5,4),
  #size = 150000.1, # size of the blocks in meters
  selection = "random", # random blocks-to-fold
  #iteration = 50, # find evenly dispersed folds
  progress = FALSE, # turn off progress bar
  biomod2 = TRUE, # also create folds for biomod2
  raster_colors = terrain.colors(20, rev = FALSE) # options from cv_plot for a better colour contrast
)

##





nK <- 4
nPseudo <- 1

CVTablePA1 <- matrix(NA, nrow = nrow(scv1$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA1) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA1[,c(i*nK-(nK-1)):c(i*nK)] <- scv1$biomod_table
  colnames(CVTablePA1)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA1 <-as.data.frame(cbind(CVTablePA1,castanea_dataPA1$ID))
head(CVTablePA1)


###

CVTablePA2 <- matrix(NA, nrow = nrow(scv2$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA2) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA2[,c(i*nK-(nK-1)):c(i*nK)] <- scv2$biomod_table
  colnames(CVTablePA2)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA2 <-as.data.frame(cbind(CVTablePA2,castanea_dataPA2$ID))
head(CVTablePA2)


###

CVTablePA3 <- matrix(NA, nrow = nrow(scv3$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA3) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA3[,c(i*nK-(nK-1)):c(i*nK)] <- scv3$biomod_table
  colnames(CVTablePA3)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA3 <-as.data.frame(cbind(CVTablePA3,castanea_dataPA3$ID))
head(CVTablePA3)


###

CVTablePA4 <- matrix(NA, nrow = nrow(scv4$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA4) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA4[,c(i*nK-(nK-1)):c(i*nK)] <- scv4$biomod_table
  colnames(CVTablePA4)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA4 <-as.data.frame(cbind(CVTablePA4,castanea_dataPA4$ID))
head(CVTablePA4)

###

CVTablePA5 <- matrix(NA, nrow = nrow(scv5$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA5) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA5[,c(i*nK-(nK-1)):c(i*nK)] <- scv5$biomod_table
  colnames(CVTablePA5)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA5 <-as.data.frame(cbind(CVTablePA5,castanea_dataPA5$ID))
head(CVTablePA5)

###

CVTablePA6 <- matrix(NA, nrow = nrow(scv6$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA6) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA6[,c(i*nK-(nK-1)):c(i*nK)] <- scv6$biomod_table
  colnames(CVTablePA6)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA6 <-as.data.frame(cbind(CVTablePA6,castanea_dataPA6$ID))
head(CVTablePA6)


###

CVTablePA7 <- matrix(NA, nrow = nrow(scv7$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA7) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA7[,c(i*nK-(nK-1)):c(i*nK)] <- scv7$biomod_table
  colnames(CVTablePA7)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA7 <-as.data.frame(cbind(CVTablePA7,castanea_dataPA7$ID))
head(CVTablePA7)

###

CVTablePA8 <- matrix(NA, nrow = nrow(scv8$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA8) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA8[,c(i*nK-(nK-1)):c(i*nK)] <- scv8$biomod_table
  colnames(CVTablePA8)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA8 <-as.data.frame(cbind(CVTablePA8,castanea_dataPA8$ID))
head(CVTablePA8)

###

CVTablePA9 <- matrix(NA, nrow = nrow(scv9$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA9) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA9[,c(i*nK-(nK-1)):c(i*nK)] <- scv9$biomod_table
  colnames(CVTablePA9)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA9 <-as.data.frame(cbind(CVTablePA9,castanea_dataPA9$ID))
head(CVTablePA9)

###

CVTablePA10 <- matrix(NA, nrow = nrow(scv10$biomod_table), ncol = nK*nPseudo)
colnames(CVTablePA10) <- paste0("x", seq_len(nK*nPseudo))
for(i in 1:nPseudo){
  CVTablePA10[,c(i*nK-(nK-1)):c(i*nK)] <- scv10$biomod_table
  colnames(CVTablePA10)[c(i*nK-(nK-1)):c(i*nK)] <- paste0("_PA",i, "_RUN", seq_len(nK))
}
CVTablePA10 <-as.data.frame(cbind(CVTablePA10,castanea_dataPA10$ID))
head(CVTablePA10)

###


colnames(CVTablePA1) <- c("_PA1_RUN1","_PA1_RUN2","_PA1_RUN3","_PA1_RUN4","ID")
colnames(CVTablePA2) <- c("_PA2_RUN1","_PA2_RUN2","_PA2_RUN3","_PA2_RUN4","ID")
colnames(CVTablePA3) <- c("_PA3_RUN1","_PA3_RUN2","_PA3_RUN3","_PA3_RUN4","ID")
colnames(CVTablePA4) <- c("_PA4_RUN1","_PA4_RUN2","_PA4_RUN3","_PA4_RUN4","ID")
colnames(CVTablePA5) <- c("_PA5_RUN1","_PA5_RUN2","_PA5_RUN3","_PA5_RUN4","ID")
colnames(CVTablePA6) <- c("_PA6_RUN1","_PA6_RUN2","_PA6_RUN3","_PA6_RUN4","ID")
colnames(CVTablePA7) <- c("_PA7_RUN1","_PA7_RUN2","_PA7_RUN3","_PA7_RUN4","ID")
colnames(CVTablePA8) <- c("_PA8_RUN1","_PA8_RUN2","_PA8_RUN3","_PA8_RUN4","ID")
colnames(CVTablePA9) <- c("_PA9_RUN1","_PA9_RUN2","_PA9_RUN3","_PA9_RUN4","ID")
colnames(CVTablePA10) <- c("_PA10_RUN1","_PA10_RUN2","_PA10_RUN3","_PA10_RUN4","ID")


CVPA1_2<-CVTablePA1|>full_join(CVTablePA2,by=c("ID"))
CVPA3_4<-CVTablePA3|>full_join(CVTablePA4,by=c("ID"))
CVPA5_6<-CVTablePA5|>full_join(CVTablePA6,by=c("ID"))
CVPA7_8<-CVTablePA7|>full_join(CVTablePA8,by=c("ID"))
CVPA9_10<-CVTablePA9|>full_join(CVTablePA10,by=c("ID"))



CVPA1_2_3_4<-CVPA1_2|>full_join(CVPA3_4,by=c("ID"))
CVPA5_6_7_8<-CVPA5_6|>full_join(CVPA7_8,by=c("ID"))
CVPA5_6_7_8_9_10<- CVPA5_6_7_8|>full_join(CVPA9_10,by=c("ID"))
CVPA1_2_3_4_5_6_7_8_9_10<-CVPA1_2_3_4|>full_join(CVPA5_6_7_8_9_10,by=c("ID"))

CVPA1_2_3_4_5_6_7_8_9_10_s <- CVPA1_2_3_4_5_6_7_8_9_10[with(CVPA1_2_3_4_5_6_7_8_9_10, order(as.numeric(ID))),]
CVPA1_2_3_4_5_6_7_8_9_10_s_r <- CVPA1_2_3_4_5_6_7_8_9_10_s %>% remove_rownames %>% column_to_rownames(var="ID")
CVPA1_2_3_4_5_6_7_8_9_10_s_r <- dplyr::mutate_all(CVPA1_2_3_4_5_6_7_8_9_10_s_r, as.logical)

CVPA1_2_3_4_5_6_7_8_9_10_s_r_m <- data.matrix(CVPA1_2_3_4_5_6_7_8_9_10_s_r)

head(CVPA1_2_3_4_5_6_7_8_9_10_s_r_m)


# BIOMOD_Tuning ------------tune your algorithms according to your blocks which also includes your species data; using multi processor cores with 'foreach' and 'parallel'-------------------

## formatted object summary
castanea_data

## plot of selected pseudo-absences

plot(castanea_data)

unregister_dopar <- function() {
  opt.t <- foreach:::.foreachGlobals
  rm(list=ls(name=opt.t), pos=opt.t)
}
unregister_dopar()

library(doParallel)
cl <- makeCluster(6)
doParallel::registerDoParallel(cl)
time.seq <- system.time(opt.t <- bm_ModelingOptions(data.type = 'binary',
                                                    bm.format = castanea_data,
                                                    models = c("RF","GBM","GLM"),
                                                    strategy = 'default',
                                                    calib.lines=CVPA1_2_3_4_5_6_7_8_9_10_s_r_m))
stopCluster(cl)

opt.t

ModelsTable

####

unregister_dopar <- function() {
  tuned.rf <- foreach:::.foreachGlobals
  rm(list=ls(name=tuned.rf), pos=tuned.rf)
}
unregister_dopar()

library(doParallel)
gl <- makeCluster(6)
doParallel::registerDoParallel(gl)
time.seq <- system.time(tuned.rf <- bm_Tuning(model = 'RF',
                                              tuning.fun = 'rf', ## see in ModelsTable
                                              do.formula = TRUE,
                                              bm.options = opt.t@options$RF.binary.randomForest.randomForest,
                                              bm.format = castanea_data,
                                              calib.lines = CVPA1_2_3_4_5_6_7_8_9_10_s_r_m))
stopCluster(gl)

tuned.rf

###

unregister_dopar <- function() {
  tuned.gbm <- foreach:::.foreachGlobals
  rm(list=ls(name=tuned.gbm), pos=tuned.gbm)
}
unregister_dopar()


library(doParallel)
bl <- makeCluster(6)
doParallel::registerDoParallel(bl)
time.seq <- system.time(tuned.gbm <- bm_Tuning(model = 'GBM',
                                               tuning.fun = 'gbm', ## see in ModelsTable
                                               do.formula = TRUE,
                                               bm.options = opt.t@options$GBM.binary.gbm.gbm,
                                               bm.format = castanea_data,
                                               calib.lines = CVPA1_2_3_4_5_6_7_8_9_10_s_r_m))
stopCluster(bl)

###

unregister_dopar <- function() {
  tuned.glm <- foreach:::.foreachGlobals
  rm(list=ls(name=tuned.glm), pos=tuned.glm)
}
unregister_dopar()

library(doParallel)
el <- makeCluster(6)
doParallel::registerDoParallel(el)
time.seq <- system.time(tuned.glm <- bm_Tuning(model = 'GLM',
                                               tuning.fun = 'glm', ## see in ModelsTable
                                               do.formula = TRUE,
                                               bm.options = opt.t@options$GLM.binary.stats.glm,
                                               bm.format = castanea_data,
                                               calib.lines = CVPA1_2_3_4_5_6_7_8_9_10_s_r_m))

stopCluster(el)


user.val <- list(RF.binary.randomForest.randomForest = tuned.rf,
                 GBM.binary.gbm.gbm = tuned.gbm,
                 GLM.binary.stats.glm = tuned.glm)
#MARS.binary.earth.earth = tuned.mars)
user.val


opt.d <- bm_ModelingOptions(data.type = 'binary',
                            models = c("GBM","RF","GLM"),
                            bm.format = castanea_data,
                            strategy = 'bigboss',
                            user.base = "bigboss")
opt.d




###

unregister_dopar <- function() {
  myOptions <- foreach:::.foreachGlobals
  rm(list=ls(name=myOptions), pos=myOptions)
}
unregister_dopar()

library(doParallel)
dl <- makeCluster(6)
doParallel::registerDoParallel(dl)
time.seq <- system.time(myOptions <- bm_ModelingOptions(data.type = 'binary',
                                                        bm.format = castanea_data,
                                                        models = c("RF","GBM","GLM"),
                                                        strategy = 'tuned',
                                                        user.val = user.val,
                                                        calib.lines = CVPA1_2_3_4_5_6_7_8_9_10_s_r_m))
stopCluster(dl)

myOptions


# BIOMOD_Modeling ---------------------------------------------------------

#### Single models

### Merge the parallelizations ###

unregister_dopar <- function() {
  myBiomodModelOut <- foreach:::.foreachGlobals
  rm(list=ls(name=myBiomodModelOut), pos=myBiomodModelOut)
}
unregister_dopar()


# Model single models
castanea_data

myBiomodModelOut <- BIOMOD_Modeling(bm.format = castanea_data,
                                    modeling.id = 'AllModels',
                                    models = c("RF","GBM","GLM"),
                                    bm.options = myOptions,
                                    CV.strategy = "user.defined",
                                    CV.user.table = CVPA1_2_3_4_5_6_7_8_9_10_s_r,
                                    var.import = 1,
                                    metric.eval = c('TSS','ROC','BOYCE'),
                                    #prevalence = 0.5,
                                    scale.models=FALSE,
                                    CV.do.full.models = FALSE,
                                    do.progress= TRUE,
                                    seed.val = 42,
                                    models.pa = list("RF" = c("PA1","PA2","PA3","PA4","PA5","PA6","PA7","PA8","PA9","PA10"),
                                                     "GBM" = c("PA1","PA2","PA3","PA4","PA5","PA6","PA7","PA8","PA9","PA10"),
                                                     "GLM" =c("PA1","PA2","PA3","PA4","PA5","PA6","PA7","PA8","PA9","PA10")))


myBiomodModelOut



# Get evaluation scores & variables importance ############


get_evaluations(myBiomodModelOut)
get_variables_importance(myBiomodModelOut)

# Represent evaluation scores & variables importance


bm_PlotEvalMean(bm.out = myBiomodModelOut, dataset = 'validation')


bm_PlotEvalBoxplot(bm.out = myBiomodModelOut, group.by = c('algo', 'PA'), dataset = 'validation')
bm_PlotEvalBoxplot(bm.out = myBiomodModelOut, group.by = c('algo', 'algo'), dataset = 'validation')


bm_PlotEvalBoxplot(bm.out = myBiomodModelOut, group.by = c('algo', 'run'), dataset = 'validation')


bm_PlotVarImpBoxplot(bm.out = myBiomodModelOut, group.by = c('expl.var', 'algo', 'algo'))



# Represent response curves #### you can treat your curves with ggplot2, individually or ensemble


mods1 <- get_built_models(myBiomodModelOut, algo='GBM')
bm_PlotResponseCurves(bm.out = myBiomodModelOut, 
                      models.chosen = mods1,
                      fixed.var = 'mean')




# BIOMOD_Projections ------------------------------------------------------

### Project models

#### Single models


# Project single models
myBiomodProj_buryal <- BIOMOD_Projection(bm.mod = myBiomodModelOut,
                                         #nb.cpu = 4,
                                         proj.name = 'Current',
                                         new.env = topohydrolyrscr_subset,
                                         models.chosen = 'all',
                                         metric.binary = 'all',
                                         metric.filter = 'all',
                                         build.clamping.mask = FALSE)

#output.format = '.tif',


jpeg("13_projection.jpeg",
     units = "px", width = 3200, height = 3200, res= 300)
plot(myBiomodProj)
dev.off()


# BIOMOD_EnsembleModeling / EnsembleForecasting ------------------------------------------------- Create your ensemble models

myBiomodEM <- BIOMOD_EnsembleModeling(bm.mod = myBiomodModelOut,
                                      models.chosen = 'all',
                                      em.by = 'all',
                                      metric.select = c('TSS'),
                                      metric.select.thresh = c(0.65),
                                      metric.select.dataset = 'validation',
                                      var.import = 1,
                                      metric.eval = c('TSS', 'ROC','BOYCE'),
                                      em.algo = c('EMmean'),
                                      EMwmean.decay = 'proportional',
                                      seed.val = 42)

myBiomodEM_algo <- BIOMOD_EnsembleModeling(bm.mod = myBiomodModelOut,
                                      models.chosen = 'all',
                                      em.by = 'algo',
                                      metric.select = c('TSS'),
                                      metric.select.thresh = c(0.55),
                                      metric.select.dataset = 'validation',
                                      var.import = 1,
                                      metric.eval = c('TSS', 'ROC','BOYCE'),
                                      em.algo = c('EMmean'),
                                      EMwmean.decay = 'proportional')


myBiomodEM

# Get evaluation scores & variables importance

get_evaluations(myBiomodEM)
get_variables_importance(myBiomodEM)


# Represent evaluation scores & variables importance

bm_PlotVarImpBoxplot(bm.out = myBiomodEM, group.by = c('algo', 'expl.var', 'full.name'))


# Represent response curves

bm_PlotResponseCurves(bm.out = myBiomodEM, 
                      models.chosen = get_built_models(myBiomodEM),
                      fixed.var = 'mean')



#Project ensemble models (from single projections) ------------- PREDICTIONS HERE! I wanted to have maps for each algorithm and ensemble separately


myBiomodEMProj <- BIOMOD_EnsembleForecasting(bm.em = myBiomodEM, 
                                                bm.proj = myBiomodProj_buryal,
                                                proj.name = 'CurrentEM',
                                                nb.cpu = 4,
                                                do.progress = TRUE,
                                                models.chosen = 'all',
                                                metric.binary = 'all',
                                                metric.filter = 'all')

myBiomodEMProj_algo <- BIOMOD_EnsembleForecasting(bm.em = myBiomodEM_algo, 
                                             bm.proj = myBiomodProj_buryal,
                                             proj.name = 'CurrentEM_algo',
                                             nb.cpu = 4,
                                             do.progress = TRUE,
                                             models.chosen = 'all',
                                             metric.binary = 'all',
                                             metric.filter = 'all')

plot(myBiomodEMProj_tr)


#### PLOT YOUR RESPONSE CURVES, you can also enhance them with gglot2 as well
 
bm_PlotResponseCurves(bm.out = myBiomodEM_algo, 
                            models.chosen = get_built_models(myBiomodEM_algo),
                            fixed.var = 'median')

